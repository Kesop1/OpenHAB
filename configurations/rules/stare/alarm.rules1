import org.openhab.core.library.types.*
import org.openhab.core.persistence.*
import org.openhab.model.script.actions.*
import org.openhab.action.squeezebox.*

import java.util.concurrent.locks.ReentrantLock

var Timer timer1 = null
var java.util.concurrent.locks.ReentrantLock lock1 = new java.util.concurrent.locks.ReentrantLock()

rule "Initialization"
 when 
   System started
 then
     postUpdate(weckerZeitStunde,  8)
     postUpdate(weckerZeitMinute, 15)
     postUpdate(weckerMontag,     ON)
     postUpdate(weckerDienstag,   ON)
     postUpdate(weckerMittwoch,   ON)
     postUpdate(weckerDonnerstag, ON)
     postUpdate(weckerFreitag,    ON)
     postUpdate(weckerSamstag,    OFF)
     postUpdate(weckerSonntag,    OFF)
 end

rule "Weckzeit"
when
    Item weckerZeitStunde changed or 
    Item weckerZeitMinute changed
then
  lock1.lock()
  try {

  var String msg = ""
  var stunde = weckerZeitStunde.state as DecimalType
  var minute = weckerZeitMinute.state as DecimalType

  if (stunde < 10) { msg = "0" } 
  msg = msg + weckerZeitStunde.state.format("%d") + ":"

  if (minute < 10) { msg = msg + "0" }
  msg = msg + weckerZeitMinute.state.format("%d")
  postUpdate(weckerZeitMessage,msg)

  var int weckzeit1
  weckzeit1 = (weckerZeitStunde.state as DecimalType).intValue * 60 + 
              (weckerZeitMinute.state as DecimalType).intValue
  weckzeit1 = weckzeit1.intValue

  var int jetzt1
  jetzt1 = now.getMinuteOfDay
  jetzt1 = jetzt1.intValue

  var int delta1
  if (timer1 != null) {
    timer1.cancel
    timer1 = null
  }

  delta1 = (weckzeit1 - jetzt1)
  delta1 = delta1.intValue

  if (jetzt1 > weckzeit1) { delta1 = delta1 + 1440 }

  timer1 = createTimer(now.plusMinutes(delta1)) [|
    var Number day = now.getDayOfWeek
    if (((day == 1) && (weckerMontag.state == ON))     ||
        ((day == 2) && (weckerDienstag.state == ON))   ||
        ((day == 3) && (weckerMittwoch.state == ON))   ||
        ((day == 4) && (weckerDonnerstag.state == ON)) ||
        ((day == 5) && (weckerFreitag.state == ON))    ||
        ((day == 6) && (weckerSamstag.state == ON))    ||
        ((day == 7) && (weckerSonntag.state == ON))
        ) {
        sendHttpGetRequest("http://192.168.10.100/ExecuteEvent.asp?Event=Wecker")

        sendCommand(ZwaveShutterEGEingang, UP)
        sendCommand(ZwaveShutterEGKuecheLinks, UP)
        sendCommand(ZwaveShutterEGKuecheRechts, UP)
        sendCommand(ZwaveShutterEGWohnenRechts, UP)
        sendCommand(ZwaveShutterEGWohnenLinks, UP)
        sendCommand(ZwaveShutterOGGang, UP)
        sendCommand(ZwaveShutterOGBuero, UP)
        sendCommand(ZwaveShutterEGTV, UP)

        createTimer(now.plusSeconds(7)) [|
          sendCommand(ZwaveShutterEGTV, STOP)
          ]
        }
       timer1.reschedule(now.plusHours(24))
     ]
    }
  } finally  {
     lock1.unlock()
  }


end

rule "Records when device was last seen"
when
  Item Fibaro_Motion_1 received update or
  Item Fibaro_Motion_1_Temp received update or
  Item Fibaro_Motion_1_Lux received update
then
  postUpdate(Fibaro_Motion_1_LastUpdate, new DateTimeType())
end


